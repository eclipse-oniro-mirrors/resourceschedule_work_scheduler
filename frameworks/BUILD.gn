# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//foundation/resourceschedule/work_scheduler/workscheduler.gni")

idl_gen_interface("work_sched_service_interface") {
  src_idl = rebase_path("IWorkSchedService.idl")
  log_domainid = "0xD001712"
  log_tag = "WORK_SCHEDULER"
}

config("worksched_private_config") {
  include_dirs = [ "${worksched_service_path}/zidl/include" ]
}

config("worksched_public_config") {
  include_dirs = [
    "${target_gen_dir}",
    "include",
  ]
}

ohos_shared_library("workschedclient") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  output_values = get_target_outputs(":work_sched_service_interface")
  sources = [
    "${worksched_frameworks_path}/src/work_info.cpp",
    "${worksched_frameworks_path}/src/workscheduler_srv_client.cpp",
  ]
  sources += filter_include(output_values, [ "*_proxy.cpp" ])

  configs = [ ":worksched_private_config" ]

  public_configs = [ ":worksched_public_config" ]

  deps = [
    ":work_sched_service_interface",
    "${worksched_utils_path}:workschedutils",
  ]

  public_external_deps = [ "jsoncpp:jsoncpp" ]

  external_deps = [
    "ability_base:want",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "resourceschedule"
  innerapi_tags = [ "platformsdk" ]
  part_name = "${worksched_native_part_name}"
}

ohos_source_set("work_sched_service_proxy") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":worksched_public_config" ]
  output_values = get_target_outputs(":work_sched_service_interface")
  sources = filter_include(output_values, [ "*_proxy.cpp" ])
  deps = [
    ":work_sched_service_interface",
    "${worksched_utils_path}:workschedutils",
  ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
  subsystem_name = "resourceschedule"
  part_name = "${worksched_native_part_name}"
}

ohos_source_set("work_sched_service_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":worksched_public_config" ]
  output_values = get_target_outputs(":work_sched_service_interface")
  sources = filter_include(output_values, [ "*_stub.cpp" ])
  deps = [
    ":work_sched_service_interface",
    "${worksched_utils_path}:workschedutils",
  ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
  subsystem_name = "resourceschedule"
  part_name = "${worksched_native_part_name}"
}